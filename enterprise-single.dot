digraph Enterprise {
  stylesheet="style.css"
  rankdir = "TB";
  /* splines="ortho"; - want this, but with it you can't use ports */

  graph [ fontname="helvetica-bold" ]
  node  [ shape="Mrecord" style="filled" fontname="helvetica" fillcolor="#ffffff" penwidth="2" ]
  edge  [ dir="back" arrowsize="0.5" fontname="helvetica"]

  /* external auth / web */
    kdc301 [ id="kdc301" label="{IdM|kdc}" ]
    ldp301 [ id="ldp301" label="{IdM|ldap}" ]

    cloud2 [ id="cloud2" label="VMWare"
             shape="custom" shapefile="cloud.svg"
             color = "none" fillcolor="none" tooltip="VMWare, OpenStack, Etc" ]
    iam1   [ id="iam1" label="Amazon\nIAM"
             shape="custom" shapefile="cloud.svg"
             color = "none" fillcolor="none" tooltip="Amazon Identitay Access Management" ]

  {

      /*
          dumbing down this cluster
          removing basic nodes from here that are also in regional db
          (same goes with worker app)
       */
      subgraph cluster_101 {
        id="app101"
        style = "rounded,filled";
        label = "Master Appliance";

        db101  [ id="db101"  label="DB1" shape="custom" shapefile="db.svg"  color = "none" fillcolor="none" ]
        ui101  [ id="ui101"  label="{UI|worker}" ]
        ap101  [ id="ap101"  label="{apache|auth...}" ]
        /*
        con101 [ id="con101" label="console" ]
        ssh101 [ id="ssh101" label="ssh" ]
        */
        /* */
        db101:s -> ui101:n [ id="db101_ui101" tooltip="host access" ]
        ui101   -> ap101   [ id="ui101_ap101" tooltip="host access" ]
        /*
        pam101 [ id="pam101" label="{pam|sssd}" ]
        con101:s -> ssh101:n [ id="con201_ssh101" ]
        {
          rank="same";
          ap101 -> pam101    [ id="ap201_pam201" constraint="true" penwidth="1" dir="forward"]
          ssh101 -> pam101   [ id="ssh201_pam201" constraint="true" penwidth="1" dir="forward"]
        }

        { rank="same"; ap101 ssh101 }
        */
      }

      subgraph cluster_201 {

        id="app201"
        style = "rounded,filled";
        label = "Regional DB Appliance";

        rep201 [ id="rep201" label="{db sync|worker}" tooltip="Ruby replication worker"]
        db201  [ id="db201"  label="DB2" shape="custom" shapefile="db.svg" color = "none" fillcolor="none" ]
        mem201 [ id="mem201" label="{memcache|session}" ]
        pam201 [ id="pam201" label="{pam|sssd}" ]
        ui201  [ id="ui201"  label="{UI|worker}" ]

        con201 [ id="con201" label="console" ]
        ap201  [ id="ap201"  label="{apache|auth?}" ]
        ssh201 [ id="ssh201" label="ssh" ]

        /* */
        db201:s  -> ui201:n  [ id="db201_ui201"   tooltip="host access (no password in databse.yml)" ]
        ui201:s  -> ap201:n  [ id="ui201_ap201"   tooltip="host access" ]
        mem201:s -> ui201:n  [ id="mem201_ui201"  tooltip="host access (firewall)" ]
        con201:s -> ssh201:n [ id="con201_ssh201" tooltip="user@host access" ]
        {
          rank="same";
          ap201  -> pam201   [ id="ap201_pam201"  dir="forward" tooltip="host access" ]
          ssh201 -> pam201   [ id="ssh201_pam201" dir="forward" tooltip="host access" ]
        }

        /* */
        rep201 -> db201  [ id="rep201_db201" dir="forward" constraint="false" tooltip="host access (database.yml)"]
      }

      subgraph cluster_202 {
        id="app202"
        style = "rounded,filled";
        label = "Worker App";

        wk202a [ id="wk202a" label="{inventory|worker}" ]
      }
  }

  /* put these together on the bottom line */

  {
    node  [ labelloc="b" fontsize="10"
            shape="custom" shape="custom" shapefile="user.svg"
            fixedsize="true" height="0.5" width="0.5" scale="both"
            color = "none" fillcolor="none"
           ]
    usera  [ id="usera" label="Admin" tooltip="Admin with Password" ]
    userp  [ id="userp" label="usr:p" tooltip="User with Password" ]
    userk  [ id="userk" label="usr:k" tooltip="User With Kerberos Ticket" ]
    userc  [ id="userc" label="usr:c" tooltip="User With SSL Cert" ]
  }
   
  /* link 101 to 201 for region to region */ 
    db101    -> rep201  [ id="db101_rep201" constraint="false" tooltip="password from file:vmdb.yml" ]
    ui101:w  -> ui201:e [ id="ui101_ui201"  dir="both" constraint="false" tooltip="user/password from file:v2_key" ]

  /* link 201 to 202 (use external database) */
    db201:s  -> wk202a  [ id="db201_wk202a" tooltip="password from file:database.yml md5(password) form file:pg_shadow" ]

  /* users access the system */

    ap101:s  -> usera:n [ id="ap101_usera" tooltip="password from user, no checking, ui101:get db101:md5(password) use file:database.yml to access db101. config via console" ]
    /* ssh101:s -> usera:n  [ id="ssh101_usera" tooltip="user/" ] */
    ap201:s  -> userp:n [ id="ap201_userp" tooltip="password from user, no checking, ui201 gets db201:md5(password) use file:database.yml to access db201. config via console" ]
    ap201:s -> userk:n  [ id="ap201_userk" tooltip="token from file:keytab, server fetches from pam(?) server verifies. client config via kinit, server config via console (ipconfig?)" ]
    ssh201:s -> userp:n [ id="ssh201_userp" tooltip="password from user, md5(password) from file:/etc/passwd" ]
    ssh201:s -> userc:n [ id="ssh201_userc" tooltip="id_rsa from file, id_rsa.pub from file. client configured from ssh-keygen, server configured on ssh-copy-id via password" ]

  /* we access external services */
    ui201    -> iam1    [ id="iam1_ui201"    dir="forward" tooltip="password from db101 config via ui101 md(password) from file:x" ]
    /*wk201 -> cloud2   [ id="cloud2_wk201"  dir="forward" constraint="false" tooltip="" ]*/
    wk202a   -> cloud2  [ id="cloud2_wk202a" dir="forward" tooltip="password from db101 config via ui101 md(password) from file:x" ]

  { rank="same"; iam1 cloud2 userp kdc301 ldp301 }

  /* access auth */
    pam201 -> kdc301 [ id="pam201_kdc301"    dir="forward" tooltip="file:keytab config ipa-client" ]
    ui201  -> ldp301 [ id="ui201_ldp301"     dir="forward" tooltip="password from file:vmdb.ymlconfig:ui201" ]
    pam201 -> ldp301 [ id="pam201_ldp301"    dir="forward" tooltip="" ]
    userk  -> kdc301 [ id="userp_kdc301"     dir="forward" constraint="false" tooltip="" ]
}
